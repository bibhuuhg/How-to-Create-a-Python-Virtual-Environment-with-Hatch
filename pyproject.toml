[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "hatch-demo"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [
  { name = "U.N. Owen", email = "void@some.where" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = []

[project.urls]
Documentation = "https://github.com/unknown/hatch-demo#readme"
Issues = "https://github.com/unknown/hatch-demo/issues"
Source = "https://github.com/unknown/hatch-demo"

[tool.hatch.version]
path = "src/hatch_demo/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "flask"
]
[tool.hatch.envs.default.scripts]
app = "python src/hatch_demo/app.py"

[tool.hatch.envs.test]
dependencies = [
  "pytest",
  "pytest-cov",
  "pytest-watcher"
]

[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.types]
dependencies = [
  "mypy>=1.0.0",
  "flask"
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/hatch_demo tests}"
format-and-lint = "black . && ruff check ."
[tool.coverage.run]
source_pkgs = ["hatch_demo", "tests"]
branch = true
parallel = true
omit = [
  "src/hatch_demo/__about__.py",
]

[tool.coverage.paths]
hatch_demo = ["src/hatch_demo", "*/hatch-demo/src/hatch_demo"]
tests = ["tests", "*/hatch-demo/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.isort]
py_version = 39
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER"
]
default_section = "LOCALFOLDER"
known_third_party = [
  "numpy",
  "pandas",
  "keras",
  "tensorflow",
  "scipy",
  "sklearn",
  "pylint",
]

# The multi-line import statement style (integer code).
# See the 'isort' documentation for the meaning of each code
known_first_party = []
known_local_folder = []
multi_line_output = 3
lines_after_imports = 2
force_single_line = true
use_parentheses = true
ensure_newline_before_comments = true
line_length = 80
include_trailing_comma = true 
skip_glob = [
  "docs/*",
  "setup.py"
]

[tool.black]
target-version = ['py310']
line-length = 80 
skip-string-normalization = false
skip-magic-trailing-comma = false
force-exclude = '''
/(
  | docs
  | setup.py
)/
'''

[tool.ruff]
target-version = "py39"
select = ["F", "E"]
extend-select = ["W", "I002", "B", "UP", "PLE", "PLW", "NPY", "RUF", "PD", "SIM", "PT"]
unfixable = []
ignore = ["SIM300"]
fixable = ["F", "E", "W", "I", "B", "UP", "PLE", "PLW", "NPY", "RUF", "PD", "SIM", "PT"]
line-length = 80
indent-width = 4
extend-exclude = ["tests", "test"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.isort]
force-single-line = true 
force-sort-within-sections = false 
lines-after-imports = 2

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true 

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false 
line-ending = "auto"
preview = false

[tool.mypy]
#Platform configuraton
python_version = "3.9"
# imports related 
ignore_missing_imports = true
follow_imports = "silent"
# None and Optional handling 
no_implicit_optional = true
strict_optional = true
# Configuring warnings 
warn_unused_configs = true 
warn_redundant_casts = true 
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true 
warn_return_any = false 
# Untyped definations and calls 
check_untyped_defs = true 
disallow_untyped_calls = false 
disallow_untyped_defs = true 
disallow_incomplete_defs = true 
disallow_untyped_decorators = false 
# Disallow dynamic typing 
disallow_subclassing_any = true 
disallow_any_unimported = false
disallow_any_expr = false 
disallow_any_decorated = false 
disallow_any_explicit = false
disallow_any_generics = false
# Miscellaneous strictness flags 
allow_untyped_globals = true 
allow_redefinition = false
local_partial_types = false 
implicit_reexport = true
strict_equality = true 
# Configuring error messages 
show_error_context = false
show_column_numbers = false
show_error_codes = true





